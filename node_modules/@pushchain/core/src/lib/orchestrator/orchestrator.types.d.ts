export type ExecuteParams = {
    /**
     * The target contract or account on Push Chain.
     */
    to: `0x${string}`;
    /**
     * Amount of native token (in wei) to send alongside the call.
     */
    value?: bigint;
    /**
     * Hex-encoded calldata or transfer payload.
     * @reason Encodes the function selector + arguments (or plain transfer).
     */
    data?: `0x${string}`;
    /**
     * Optional hard cap on gas to use for this transaction.
     * @reason Prevents runaway gas consumption and lets users enforce limits.
     */
    gasLimit?: bigint;
    /**
     * Optional override for the EIP-1559 max fee per gas (in wei).
     * @reason Gives callers direct control over total gas price to speed up or save cost.
     */
    maxFeePerGas?: bigint;
    /**
     * Optional override for the EIP-1559 max priority fee per gas (in wei).
     * TODO: This will be removed
     * @reason Allows customizing the miner tip separately from the base fee.
     */
    maxPriorityFeePerGas?: bigint;
    /**
     * Optional to bypass fee locking in case funds are already locked by user
     */
    feeLockTxHash?: string;
    /**
     * Optional explicit nonce for the transaction.
     * @reason Ensures correct ordering and avoids “replacement underpriced” when sending in parallel.
     */
    nonce?: bigint;
    /**
     * Optional for signature expiry
     */
    deadline?: bigint;
    /**
     * For funding gas fees. If undefined (default), gas fees will be paid in the native token.
     * If specified, the user can select which token to pay gas fees from.
     */
    fundGas?: {
        chainToken: `0x${string}`;
    };
    /**
     * Optional funds movement from origin chain to Push Chain (FUNDS_TX).
     * When present and no calldata is provided, the SDK will bridge the specified
     * ERC‑20 token amount to Push Chain using the Universal Gateway.
     *
     * Notes:
     * - Currently supported only on Ethereum Sepolia
     * - pay-with-token gas abstraction is NOT supported yet
     */
    funds?: {
        amount: bigint;
        token?: import('../constants').MoveableToken;
    };
};
/**
 * New Universal Transaction Receipt interface with prioritized field ordering
 */
export interface UniversalTxResponse {
    hash: string;
    origin: string;
    blockNumber: bigint;
    blockHash: string;
    transactionIndex: number;
    chainId: string;
    from: string;
    to: string;
    nonce: number;
    data: string;
    value: bigint;
    gasLimit: bigint;
    gasPrice?: bigint;
    maxFeePerGas?: bigint;
    maxPriorityFeePerGas?: bigint;
    accessList: any[];
    wait: () => Promise<UniversalTxReceipt>;
    type: string;
    typeVerbose: string;
    signature: Signature;
    raw?: {
        from: string;
        to: string;
        nonce: number;
        data: string;
        value: bigint;
    };
}
/**
 * New Universal Transaction Receipt interface for transaction receipts
 */
export interface UniversalTxReceipt {
    hash: string;
    blockNumber: bigint;
    blockHash: string;
    transactionIndex: number;
    from: string;
    to: string;
    contractAddress: string | null;
    gasPrice: bigint;
    gasUsed: bigint;
    cumulativeGasUsed: bigint;
    logs: any[];
    logsBloom: string;
    status: 0 | 1;
    raw: {
        from: string;
        to: string;
    };
}
/**
 * Signature interface modeled after ethers.js v6 Signature interface
 */
export interface Signature {
    r: string;
    s: string;
    v: number;
    yParity?: number;
}

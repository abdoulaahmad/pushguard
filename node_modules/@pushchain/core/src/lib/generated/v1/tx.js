"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: v1/tx.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgExecutePayload = exports.UniversalPayload = exports.MsgMintPC = exports.MsgDeployUEA = exports.UniversalAccountId = exports.VerificationType = exports.protobufPackage = void 0;
exports.verificationTypeFromJSON = verificationTypeFromJSON;
exports.verificationTypeToJSON = verificationTypeToJSON;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "ue.v1";
/** Signature verification types */
var VerificationType;
(function (VerificationType) {
    /** signedVerification - Signed verification using a signature */
    VerificationType[VerificationType["signedVerification"] = 0] = "signedVerification";
    /** universalTxVerification - Universal transaction verification */
    VerificationType[VerificationType["universalTxVerification"] = 1] = "universalTxVerification";
    VerificationType[VerificationType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(VerificationType || (exports.VerificationType = VerificationType = {}));
function verificationTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "signedVerification":
            return VerificationType.signedVerification;
        case 1:
        case "universalTxVerification":
            return VerificationType.universalTxVerification;
        case -1:
        case "UNRECOGNIZED":
        default:
            return VerificationType.UNRECOGNIZED;
    }
}
function verificationTypeToJSON(object) {
    switch (object) {
        case VerificationType.signedVerification:
            return "signedVerification";
        case VerificationType.universalTxVerification:
            return "universalTxVerification";
        case VerificationType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseUniversalAccountId() {
    return { chainNamespace: "", chainId: "", owner: "" };
}
exports.UniversalAccountId = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.chainNamespace !== "") {
            writer.uint32(10).string(message.chainNamespace);
        }
        if (message.chainId !== "") {
            writer.uint32(18).string(message.chainId);
        }
        if (message.owner !== "") {
            writer.uint32(26).string(message.owner);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUniversalAccountId();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.chainNamespace = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.chainId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.owner = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            chainNamespace: isSet(object.chainNamespace) ? globalThis.String(object.chainNamespace) : "",
            chainId: isSet(object.chainId) ? globalThis.String(object.chainId) : "",
            owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.chainNamespace !== "") {
            obj.chainNamespace = message.chainNamespace;
        }
        if (message.chainId !== "") {
            obj.chainId = message.chainId;
        }
        if (message.owner !== "") {
            obj.owner = message.owner;
        }
        return obj;
    },
    create(base) {
        return exports.UniversalAccountId.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseUniversalAccountId();
        message.chainNamespace = (_a = object.chainNamespace) !== null && _a !== void 0 ? _a : "";
        message.chainId = (_b = object.chainId) !== null && _b !== void 0 ? _b : "";
        message.owner = (_c = object.owner) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseMsgDeployUEA() {
    return { signer: "", universalAccountId: undefined, txHash: "" };
}
exports.MsgDeployUEA = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.signer !== "") {
            writer.uint32(10).string(message.signer);
        }
        if (message.universalAccountId !== undefined) {
            exports.UniversalAccountId.encode(message.universalAccountId, writer.uint32(18).fork()).join();
        }
        if (message.txHash !== "") {
            writer.uint32(26).string(message.txHash);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgDeployUEA();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.signer = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.universalAccountId = exports.UniversalAccountId.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.txHash = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
            universalAccountId: isSet(object.universalAccountId)
                ? exports.UniversalAccountId.fromJSON(object.universalAccountId)
                : undefined,
            txHash: isSet(object.txHash) ? globalThis.String(object.txHash) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.signer !== "") {
            obj.signer = message.signer;
        }
        if (message.universalAccountId !== undefined) {
            obj.universalAccountId = exports.UniversalAccountId.toJSON(message.universalAccountId);
        }
        if (message.txHash !== "") {
            obj.txHash = message.txHash;
        }
        return obj;
    },
    create(base) {
        return exports.MsgDeployUEA.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMsgDeployUEA();
        message.signer = (_a = object.signer) !== null && _a !== void 0 ? _a : "";
        message.universalAccountId = (object.universalAccountId !== undefined && object.universalAccountId !== null)
            ? exports.UniversalAccountId.fromPartial(object.universalAccountId)
            : undefined;
        message.txHash = (_b = object.txHash) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseMsgMintPC() {
    return { signer: "", universalAccountId: undefined, txHash: "" };
}
exports.MsgMintPC = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.signer !== "") {
            writer.uint32(10).string(message.signer);
        }
        if (message.universalAccountId !== undefined) {
            exports.UniversalAccountId.encode(message.universalAccountId, writer.uint32(18).fork()).join();
        }
        if (message.txHash !== "") {
            writer.uint32(26).string(message.txHash);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgMintPC();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.signer = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.universalAccountId = exports.UniversalAccountId.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.txHash = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
            universalAccountId: isSet(object.universalAccountId)
                ? exports.UniversalAccountId.fromJSON(object.universalAccountId)
                : undefined,
            txHash: isSet(object.txHash) ? globalThis.String(object.txHash) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.signer !== "") {
            obj.signer = message.signer;
        }
        if (message.universalAccountId !== undefined) {
            obj.universalAccountId = exports.UniversalAccountId.toJSON(message.universalAccountId);
        }
        if (message.txHash !== "") {
            obj.txHash = message.txHash;
        }
        return obj;
    },
    create(base) {
        return exports.MsgMintPC.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMsgMintPC();
        message.signer = (_a = object.signer) !== null && _a !== void 0 ? _a : "";
        message.universalAccountId = (object.universalAccountId !== undefined && object.universalAccountId !== null)
            ? exports.UniversalAccountId.fromPartial(object.universalAccountId)
            : undefined;
        message.txHash = (_b = object.txHash) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseUniversalPayload() {
    return {
        to: "",
        value: "",
        data: "",
        gasLimit: "",
        maxFeePerGas: "",
        maxPriorityFeePerGas: "",
        nonce: "",
        deadline: "",
        vType: 0,
    };
}
exports.UniversalPayload = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.to !== "") {
            writer.uint32(10).string(message.to);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        if (message.data !== "") {
            writer.uint32(26).string(message.data);
        }
        if (message.gasLimit !== "") {
            writer.uint32(34).string(message.gasLimit);
        }
        if (message.maxFeePerGas !== "") {
            writer.uint32(42).string(message.maxFeePerGas);
        }
        if (message.maxPriorityFeePerGas !== "") {
            writer.uint32(50).string(message.maxPriorityFeePerGas);
        }
        if (message.nonce !== "") {
            writer.uint32(58).string(message.nonce);
        }
        if (message.deadline !== "") {
            writer.uint32(66).string(message.deadline);
        }
        if (message.vType !== 0) {
            writer.uint32(72).int32(message.vType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUniversalPayload();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.to = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.data = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.gasLimit = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.maxFeePerGas = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.maxPriorityFeePerGas = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.nonce = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.deadline = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.vType = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            to: isSet(object.to) ? globalThis.String(object.to) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
            data: isSet(object.data) ? globalThis.String(object.data) : "",
            gasLimit: isSet(object.gasLimit) ? globalThis.String(object.gasLimit) : "",
            maxFeePerGas: isSet(object.maxFeePerGas) ? globalThis.String(object.maxFeePerGas) : "",
            maxPriorityFeePerGas: isSet(object.maxPriorityFeePerGas) ? globalThis.String(object.maxPriorityFeePerGas) : "",
            nonce: isSet(object.nonce) ? globalThis.String(object.nonce) : "",
            deadline: isSet(object.deadline) ? globalThis.String(object.deadline) : "",
            vType: isSet(object.vType) ? verificationTypeFromJSON(object.vType) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.to !== "") {
            obj.to = message.to;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        if (message.data !== "") {
            obj.data = message.data;
        }
        if (message.gasLimit !== "") {
            obj.gasLimit = message.gasLimit;
        }
        if (message.maxFeePerGas !== "") {
            obj.maxFeePerGas = message.maxFeePerGas;
        }
        if (message.maxPriorityFeePerGas !== "") {
            obj.maxPriorityFeePerGas = message.maxPriorityFeePerGas;
        }
        if (message.nonce !== "") {
            obj.nonce = message.nonce;
        }
        if (message.deadline !== "") {
            obj.deadline = message.deadline;
        }
        if (message.vType !== 0) {
            obj.vType = verificationTypeToJSON(message.vType);
        }
        return obj;
    },
    create(base) {
        return exports.UniversalPayload.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseUniversalPayload();
        message.to = (_a = object.to) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        message.data = (_c = object.data) !== null && _c !== void 0 ? _c : "";
        message.gasLimit = (_d = object.gasLimit) !== null && _d !== void 0 ? _d : "";
        message.maxFeePerGas = (_e = object.maxFeePerGas) !== null && _e !== void 0 ? _e : "";
        message.maxPriorityFeePerGas = (_f = object.maxPriorityFeePerGas) !== null && _f !== void 0 ? _f : "";
        message.nonce = (_g = object.nonce) !== null && _g !== void 0 ? _g : "";
        message.deadline = (_h = object.deadline) !== null && _h !== void 0 ? _h : "";
        message.vType = (_j = object.vType) !== null && _j !== void 0 ? _j : 0;
        return message;
    },
};
function createBaseMsgExecutePayload() {
    return { signer: "", universalAccountId: undefined, universalPayload: undefined, verificationData: "" };
}
exports.MsgExecutePayload = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.signer !== "") {
            writer.uint32(10).string(message.signer);
        }
        if (message.universalAccountId !== undefined) {
            exports.UniversalAccountId.encode(message.universalAccountId, writer.uint32(18).fork()).join();
        }
        if (message.universalPayload !== undefined) {
            exports.UniversalPayload.encode(message.universalPayload, writer.uint32(26).fork()).join();
        }
        if (message.verificationData !== "") {
            writer.uint32(34).string(message.verificationData);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgExecutePayload();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.signer = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.universalAccountId = exports.UniversalAccountId.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.universalPayload = exports.UniversalPayload.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.verificationData = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
            universalAccountId: isSet(object.universalAccountId)
                ? exports.UniversalAccountId.fromJSON(object.universalAccountId)
                : undefined,
            universalPayload: isSet(object.universalPayload) ? exports.UniversalPayload.fromJSON(object.universalPayload) : undefined,
            verificationData: isSet(object.verificationData) ? globalThis.String(object.verificationData) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.signer !== "") {
            obj.signer = message.signer;
        }
        if (message.universalAccountId !== undefined) {
            obj.universalAccountId = exports.UniversalAccountId.toJSON(message.universalAccountId);
        }
        if (message.universalPayload !== undefined) {
            obj.universalPayload = exports.UniversalPayload.toJSON(message.universalPayload);
        }
        if (message.verificationData !== "") {
            obj.verificationData = message.verificationData;
        }
        return obj;
    },
    create(base) {
        return exports.MsgExecutePayload.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMsgExecutePayload();
        message.signer = (_a = object.signer) !== null && _a !== void 0 ? _a : "";
        message.universalAccountId = (object.universalAccountId !== undefined && object.universalAccountId !== null)
            ? exports.UniversalAccountId.fromPartial(object.universalAccountId)
            : undefined;
        message.universalPayload = (object.universalPayload !== undefined && object.universalPayload !== null)
            ? exports.UniversalPayload.fromPartial(object.universalPayload)
            : undefined;
        message.verificationData = (_b = object.verificationData) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=tx.js.map